[
{
	"uri": "//localhost:50000/3-initialize_load_balancer/3.1-public-instance/",
	"title": "Connect to Public Instance",
	"tags": [],
	"description": "",
	"content": "\nGo to EC2 service management console. Click on Public Linux Instance. Click Actions. Click Security. Click Modify IAM role. At the Modify IAM role page. Click to select SSM-Role. Click Save. You will need to wait about 10 minutes before performing the next step. This time our EC2 instance will automatically register with the Session Manager.\nGo to the AWS Systems Manager service management console Drag the left menu slider down. Click Session Manager. Click Start Session. Then select Public Linux Instance and click Start session to access the instance. Terminal will appear on the browser. Testing with the command sudo tcpdump -nn port 22 and sudo tcpdump we will see no SSH traffic but only HTTPS traffic. Above, we have created a connection to the public instance without opening SSH port 22, for better security, avoiding any attack to the SSH port.\nOne disadvantage of the above method is that we have to open the Security Group outbound at port 443 to the internet. Since it\u0026rsquo;s a public instance, it probably won\u0026rsquo;t be a problem, but if you want extra security, you can block port 443 to the internet and still use the Session Manager. We will go through this in the private instance section below.\nYou can click terminate to end the currently connected session before proceeding to the next step.\n"
},
{
	"uri": "//localhost:50000/3-initialize_load_balancer/3.2-private-instance/3.2.2-createvpcendpoint/3.2.2.1-endpointssm/",
	"title": "Create Endpoint ssm",
	"tags": [],
	"description": "",
	"content": "Create VPC Endpoint SSM Go to VPC service management console Click Endpoints. Click Create endpoint. At the Create endpoint page. In the Name tag field, enter SSM. In the Service Category section, select AWS Services. In the Service Name section, In the Service category section, select: AWS services In the Service Name section enter: SSM then select Service Name: com.amazonaws.ap-southeast-1.ssm. In the Service Name column, click com.amazonaws.ap-southeast-1.ssm. In the VPC section, select Lab VPC. Select the first AZ, then select the Lab Private Subnet subnet. Scroll down. In the Security Group section, select the Security group SG VPC Endpoint that we created earlier. In the Policy section, select Full access. Scroll down. Click Create endpoint. We have created the VPC Interface Endpoint for SSM. "
},
{
	"uri": "//localhost:50000/2-create_ec2_instance_for_load_balancing/2.1-launch_your_first_ec2_instance/2.1.1-createvpc/",
	"title": "Create VPC",
	"tags": [],
	"description": "",
	"content": "Create VPC Lab VPC Go to VPC service management console Click Your VPC. Click Create VPC. At the Create VPC page. In the Name tag field, enter Lab VPC. In the IPv4 CIDR field, enter: 10.10.0.0/16. Click Create VPC. "
},
{
	"uri": "//localhost:50000/3-initialize_load_balancer/3.2-private-instance/3.2.1-enablevpcdns/",
	"title": "Enable DNS hostnames",
	"tags": [],
	"description": "",
	"content": "Enable DNS hostnames on VPC. To create VPC Endpoint we will need to enable DNS hostnames feature on VPC. Go to VPC service management console\nClick Your VPCs.\nSelect Lab VPC.\nClick Actions.\nClick Edit DNS hostnames.\nClick Endpoint, then click Create Endpoint.\nAt the Edit DNS hostnames page. Click to select Enable. Click Save changes. "
},
{
	"uri": "//localhost:50000/1-introduce/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Among the many ways that computers process data, one of the most common is read-only data that needs to be presented quickly and to a large number of users, such as music or videos that are streamed around the world. This type of data is rarely updated or deleted, but it is large in volume and demand can fluctuate significantly (think of a viral video or song). Because the need for this type of access is becoming more common, Amazon Web Services (AWS) provides tools to handle it. These tools are essentially tools that can retrieve data quickly and distribute it across multiple servers to meet peaks and troughs in demand—and do so in a cost-effective way, charging only for usage.\nApplications and websites often provide a wide range of data and services to users. Within this large data set, there is often a smaller subset of data that is requested and accessed more frequently. This could be front-page data that is shown to every visitor (think Amazon’s top 10 products of the day), or it could be a recently released piece of media that is experiencing a spike in popularity (a new song released on Spotify). Other applications run extremely memory-intensive processes and may experience performance issues on slower storage.\nIn this workshop, we’ll take a deeper look at Amazon ElastiCache and Elastic Load Balancing?, exploring how it works, the benefits, and how to deploy it to optimize your application performance.\nWhat you will learn What is ElasticCache ? What is Elastic Load Balancing ? Pricing Types of ELBs in AWS "
},
{
	"uri": "//localhost:50000/",
	"title": "Load Balancer",
	"tags": [],
	"description": "",
	"content": "Overview In this post, we will learn about Elastic Load Balancing on AWS\nContents included Introduction\nLab 1: Initializing EC2 Instance\nLab 2: Initializing Load balancer\nTesting and cleanup\nContent Introduction Create EC2 instance for load balancer Initialize load balancer Test clean up "
},
{
	"uri": "//localhost:50000/2-create_ec2_instance_for_load_balancing/2.1-launch_your_first_ec2_instance/",
	"title": "Preparing VPC and EC2",
	"tags": [],
	"description": "",
	"content": "In this step, we will need to create a VPC with 2 public / private subnets. Then create 1 EC2 Instance Linux located in the public subnet, 1 EC2 Instance Windows located in the private subnet.\nThe architecture overview after you complete this step will be as follows:\nTo learn how to create EC2 instances and VPCs with public/private subnets, you can refer to the lab:\nAbout Amazon EC2 Works with Amazon VPC Content Create EC2 instance for load balancing Initialize Load Balancer Test and clean up "
},
{
	"uri": "//localhost:50000/4-test_clean_up/4.1-updateiamrole/",
	"title": "Update IAM Role",
	"tags": [],
	"description": "",
	"content": "For our EC2 instances to be able to send session logs to the S3 bucket, we will need to update the IAM Role assigned to the EC2 instance by adding a policy that allows access to S3.\nUpdate IAM Role Go to IAM service management console Click Roles. In the search box, enter SSM. Click on the SSM-Role role. Click Attach policies. In the Search box enter S3. Click the policy AmazonS3FullAccess. Click Attach policy. In the production environment, we will grant stricter permissions to the specified S3 bucket. In the framework of this lab, we use the policy AmazonS3FullAccess for convenience.\nNext, we will proceed to create an S3 bucket to store session logs.\n"
},
{
	"uri": "//localhost:50000/1-introduce/1.1-what_is_elasticcache/",
	"title": "What is ElasticCache",
	"tags": [],
	"description": "",
	"content": "Amazon ElastiCache makes it easy to set up, manage, and scale a distributed caching environment in the AWS Cloud. It provides a high-performance, scalable, and cost-effective in-memory cache, while eliminating the complexity associated with deploying and managing a distributed caching environment.\nElastiCache supports two open-source in-memory caching engines: Redis and Memcached.\nRedis, short for Remote Dictionary Server, is a fast, open-source data structure store. It is commonly used as a distributed in-memory data store that is used as a database, cache, streaming engine, and message broker. Redis supports a variety of abstract data structures, such as strings, lists, maps, sets, sorted sets, HyperLogLog, bitmaps, streams, and spatial indices. Memcached is an intuitive, high-performance in-memory data store. It provides a mature, scalable, open-source solution for delivering sub-millisecond response times, making it useful as a cache or a non-durable session store. ElastiCache is a fully managed in-memory caching service that supports real-time use cases that require extremely fast performance and high throughput. ElastiCache is often used as a cache to increase application or database performance. It can also serve as the primary data store for use cases that do not require durability, such as session stores, gaming leaderboards, streaming, and API rate limiting.\nWhat problems does ElastiCache solve? Using ElastiCache, you can streamline how you deploy, operate, and scale in the cloud. With traditional databases, you have to manage the infrastructure and underlying upgrades, patching, cluster management, backups, and production workloads. Fully managed database services automate these tasks. Here are some ways ElastiCache can help:\nProvide API-compliant Redis and Memcached engines with any open source application that uses OSS Redis or Memcached Scale your compute and memory resources vertically or horizontally in minutes Scale your read/write capacity based on changing business needs Provide high levels of security and support for Amazon Virtual Private Cloud (Amazon VPC), Transport Layer Security (TLS), encryption, and qualify for multiple compliance certifications Provide continuous monitoring and automatic failover The goal of ElastiCache is to reduce the additional complexity of managing your in-memory caching system for Redis and Memcached engines. Developers can continue to use the same Redis and Memcached application code, drivers, and tools to run, manage, and scale their workloads on ElastiCache. Developers and administrators can rely on managed services to handle the heavy lifting, focusing on application development to add value to their customers.\nHow is ElastiCache used to build cloud solutions? ElastiCache stores data in the server\u0026rsquo;s main memory (DRAM) for fast access. ElastiCache is often used as a cache in front of a backend primary database such as Amazon Relational Database Service (Amazon RDS). Since data stored in DRAM can be accessed much faster than disk-based systems, ElastiCache can provide significant performance benefits when placed in front of the database.\nElastiCache is an in-memory only service designed to provide blazing fast performance at the expense of durability. It can serve temporary data reads/writes at microsecond latency, which is desirable for real-time applications.\nThe following diagram shows an example of how when a client sends a request to an application, it first tries to retrieve the corresponding data from ElastiCache. If the request is successful, it is called a cache hit. If it is unsuccessful, it is called a cache miss. In case of a cache miss, the request is forwarded to the real data source (RDS MySQL in this case) and the corresponding data is retrieved. The data is then written to the cache before the response is sent back to the client.\nExample of how ElastiCache handles client requests to the application "
},
{
	"uri": "//localhost:50000/3-initialize_load_balancer/3.2-private-instance/",
	"title": "Connect to Private instance",
	"tags": [],
	"description": "",
	"content": "For Windows instance located in private subnet, there is no public IP, no internet gateway so it cannot go out internet.\nWith this type of instance, the traditional way is to use Bastion host technique which is expensive and laborious, but here we will use Session Manager with this type.\nBasically, the private instance still has to open the TCP 443 port to System Manager, but we don\u0026rsquo;t want to allow connection go out to the internet, but only in its VPC, to enhance our security posture.\nTo do that, we have to include the System Manager endpoint in the VPC, that is, using the VPC interface endpoint:\nVPC interface endpoint is attached to the subnet, so this method can be done not only with private subnet but also with public subnet, meaning that with public subnet, you can completely prohibit TCP 443 go out to the internet.\nContent: Enable DNS hostnames Create VPC Endpoint Connect Private Instance "
},
{
	"uri": "//localhost:50000/3-initialize_load_balancer/3.2-private-instance/3.2.2-createvpcendpoint/3.2.2.2-endpointssmmessages/",
	"title": "Create Endpoint ssmmessages",
	"tags": [],
	"description": "",
	"content": "Create VPC Endpoint SSMMESSAGES Go to VPC service management console Click Endpoints. Click Create endpoint. At the Create endpoint page. In the Name tag field, enter SSMMESSAGES. In the Service Category section, select AWS Services. In the Service Name section, In the Service category select: AWS services In the Service Name field enter: ssmmessages then select Service Name: com.amazonaws.ap-southeast-1.ssmmessages. In the Service Name column, click com.amazonaws.ap-southeast-1.ssmmessages. In the VPC section, select Lab VPC. Select the first AZ, then select the Lab Private Subnet subnet. Scroll down. In the Security Group section, select the Security group SG VPC Endpoint that we created earlier. In the Policy section, select Full access Scroll down. Click Create endpoint. We have created the VPC Interface Endpoint SSMMESSAGES. "
},
{
	"uri": "//localhost:50000/2-create_ec2_instance_for_load_balancing/2.2-launch_a_second_ec2_instance/",
	"title": "Create IAM Role",
	"tags": [],
	"description": "",
	"content": "Create IAM Role In this step, we will proceed to create IAM Role. In this IAM Role, the policy AmazonSSMManagedInstanceCore will be assigned, this is the policy that allows the EC2 server to communicate with the Session Manager.\nGo to IAM service administration interface In the left navigation bar, click Roles. Click Create role. Click AWS service and click EC2. Click Next: Permissions. In the Search box, enter AmazonSSMManagedInstanceCore and press Enter to search for this policy. Click the policy AmazonSSMManagedInstanceCore. Click Next: Tags. Click Next: Review. Name the Role SSM-Role in Role Name Click Create Role . Next, we will make the connection to the EC2 servers we created with Session Manager.\n"
},
{
	"uri": "//localhost:50000/2-create_ec2_instance_for_load_balancing/2.1-launch_your_first_ec2_instance/2.1.2-createpublicsubnet/",
	"title": "Create Public Subnet",
	"tags": [],
	"description": "",
	"content": "Create Public Subnet Click Subnets. Click Create subnet. At the Create subnet page. In the VPC ID section, click Lab VPC. In the Subnet name field, enter Lab Public Subnet. In the Availability Zone section, select the first Availability zone. In the field IPv4 CIRD block enter 10.10.1.0/24. Scroll to the bottom of the page, click Create subnet.\nClick Lab Public Subnet.\nClick Actions. Click Edit subnet settings. Click Enable auto-assign public IPv4 address. Click Save. Click Internet Gateways. Click Create internet gateway. At the Create internet gateway page. In the Name tag field, enter Lab IGW. Click Create internet gateway. After successful creation, click Actions. Click Attach to VPC. At the Attach to VPC page. In the Available VPCs section, select Lab VPC. Click Attach internet gateway. Check the successful attaching process as shown below. Next we will create a custom route table to assign to Lab Public Subnet. Click Route Tables. Click Create route table. At the Create route table page. In the Name field, enter Lab Publicrtb. In the VPC section, select Lab VPC. Click Create route table. After creating the route table successfully. Click Edit routes. At the Edit routes page. Click Add route. In the Destination field, enter 0.0.0.0/0 In the Target section, select Internet Gateway and then select Lab IGW. Click Save changes. Click the Subnet associations tab. Click Edit subnet associations to proceed with the associate custom route table we just created in Lab Public Subnet. At the Edit subnet associations page. Click on Lab Public Subnet. Click Save associations. Check that the route table information has been associated with Lab Public Subnet and the internet route information has been pointed to the Internet Gateway as shown below. "
},
{
	"uri": "//localhost:50000/4-test_clean_up/4.2-creates3bucket/",
	"title": "Create S3 Bucket",
	"tags": [],
	"description": "",
	"content": "In this step, we will create an S3 bucket to store session logs sent from EC2 instances.\nCreate S3 Bucket Access S3 service management console Click Create bucket. At the Create bucket page. In the Bucket name field, enter the bucket name lab-yourname-bucket-0001 In the Region section, select Region you are doing the current lab. The name of the S3 bucket must not be the same as all other S3 buckets in the system. You can substitute your name and enter a random number when generating the S3 bucket name.\nScroll down and click Create bucket. When we created the S3 bucket we did Block all public access so our EC2 instances won\u0026rsquo;t be able to connect to S3 via the internet. In the next step, we will configure the S3 Gateway Endpoint feature to allow EC2 instances to connect to the S3 bucket via the VPC\u0026rsquo;s internal network.\n"
},
{
	"uri": "//localhost:50000/3-initialize_load_balancer/3.2-private-instance/3.2.2-createvpcendpoint/",
	"title": "Create VPC Endpoint",
	"tags": [],
	"description": "",
	"content": "Create VPC Endpoint SSM We will create 3 interface endpoints required by the Session Manager:\nInterface endpoints: com.amazonaws.region.ssm com.amazonaws.region.ec2messages com.amazonaws.region.ssmmessages You can refer to more here\nContent: Create Endpoint ssm Create Endpoint ssmmessages Create Endpoint ec2messages "
},
{
	"uri": "//localhost:50000/2-create_ec2_instance_for_load_balancing/",
	"title": "Preparation ",
	"tags": [],
	"description": "",
	"content": "\rYou need to create 1 Linux instance on the public subnet and 1 Window instance on the private subnet to perform this lab.\nTo learn how to create EC2 instances and VPCs with public/private subnets, you can refer to the lab:\nAbout Amazon EC2 Works with Amazon VPC In order to use System Manager to manage our window instances in particular and our instances in general on AWS, we need to give permission to our instances to be able to work with System Manager. In this preparation, we will also proceed to create an IAM Role to grant permissions to instances that can work with System Manager.\nContent Prepare VPC and EC2 Create IAM Role "
},
{
	"uri": "//localhost:50000/1-introduce/1.2-what_is_elastic_load_balancing/",
	"title": "What is Elastic Load Balancing",
	"tags": [],
	"description": "",
	"content": "Other applications run extremely memory-intensive processes and may experience performance issues on slower storage.\nFor this type of highly requested or memory-intensive data, a data caching service like ElastiCache can help ensure that data can be accessed and processed extremely quickly. It works by storing data in ultra-fast memory, but temporarily, faster than disk storage. The trade-off is that fast storage has less storage capacity and does not store data permanently.\nMany companies use ElastiCache to build real-time applications, accelerate e-commerce, and cache their websites. Use cases: real-time transactions, chat, BI and analytics, session stores, gaming leaderboards, and caching.\nHeavy traffic can take down applications and websites if the server cannot handle the load. This is why AWS has ELB, which can detect when there are too many requests and automatically redirect traffic to new servers to maintain speed and stability.\nElastic Load Balancing automatically distributes your incoming traffic across multiple targets, such as EC2 instances, containers, and IP addresses, in one or more Availability Zones. It monitors the health of registered targets and routes traffic only to healthy targets. Elastic Load Balancing automatically adjusts your load balancer capacity in response to changes in incoming traffic.\nBenefits of Load Balancing Elastic Load Balancing automatically distributes incoming application traffic across multiple targets, such as Amazon Elastic Computing Cloud (Amazon EC2) instances, containers, IP addresses, and AWS Lambda functions.\nIf traffic to a website suddenly spikes, that traffic can be routed to other EC2 instances (or other instance types such as Lambda instances) that have been pre-set up for this purpose. This load balancing prevents a single server from being overloaded by increased traffic.\nKey benefits of ELB: Increased availability: Traffic distribution: ELB distributes traffic to multiple instances, reducing the risk of one instance failing. If an instance fails, ELB automatically redirects requests to the remaining instances.\nResilience: ELB continuously monitors the health of instances and automatically removes inactive ones and adds new ones as needed.\nImproved performance: Load distribution: ELB helps distribute workload evenly across instances, preventing one instance from becoming overloaded.\nReduce Response Time: By distributing traffic, ELB helps reduce application response time, providing a better user experience.\nIncrease Scalability: Automatic Scaling: ELB can automatically adjust the size of the instance cluster to meet the changing needs of the application. As traffic increases, ELB will automatically add new instances to the cluster and vice versa. Security: SSL/TLS Connection: ELB supports SSL/TLS connection to secure data transmitted between users and applications.\nCertificate Management: ELB helps you easily manage SSL/TLS certificates.\nAdvanced Features: Path-Based Load Balancing: ELB can distribute traffic based on URL paths, helping to optimize the use of resources.\nCookie-based load balancing: ELB can maintain user sessions using cookies, ensuring that requests from a particular user are always sent to the same instance.\nIntegration with other AWS services: ELB can easily integrate with other AWS services such as Auto Scaling, CloudWatch, and Route 53.\n"
},
{
	"uri": "//localhost:50000/3-initialize_load_balancer/",
	"title": "Connect to EC2 servers",
	"tags": [],
	"description": "",
	"content": "In this step, we will connect to our EC2 servers, located in both the public and private subnets.\nContent 3.1. Connect to EC2 Public Server 3.2. Cconnect to EC2 Private Server\n"
},
{
	"uri": "//localhost:50000/3-initialize_load_balancer/3.2-private-instance/3.2.3-connectec2/",
	"title": "Connect to instance",
	"tags": [],
	"description": "",
	"content": "Assign IAM role and restart EC2 instance. Go to EC2 service management console Click Private Windows Instance. Click Actions. Click Security. Click Modify IAM Role. At the Modify IAM Role page. In the IAM role section, select SSM-Role. Click Save. Click Private Windows Instance. Click Instance state. Click Reboot instance to restart, then click Reboot to confirm. Please wait 5 minutes before doing the next step.\nConnect to the private EC2 instance. Go to System Manager - Session Manager service management console Click Start session. Click Private Windows Instance. Click Start session. Type ipconfig command to check the IP address information of Private Windows Instance as shown below. "
},
{
	"uri": "//localhost:50000/3-initialize_load_balancer/3.2-private-instance/3.2.2-createvpcendpoint/3.2.2.3-endpointec2messages/",
	"title": "Create Endpoint ec2messages",
	"tags": [],
	"description": "",
	"content": "Create VPC Endpoint EC2MESSAGES Go to VPC service management console Click Endpoints. Click Create endpoint. At the Create endpoint page. In the Name tag field, enter SSMMESSAGES. In the Service Category section, select AWS Services. In the Service Name section, In the Service category select: AWS services In the field Service Name enter: ec2 then select Service Name: com.amazonaws.ap-southeast-1.ec2messages. In the Service Name column, click com.amazonaws.ap-southeast-1.ec2messages. In the VPC section, select Lab VPC. Select the first AZ, then select the Lab Private Subnet subnet. Scroll down. In the Security Group section, select the Security group SG VPC Endpoint that we created earlier. In the Policy section, select Full access Scroll down. Click Create endpoint. We have created the VPC Interface Endpoint EC2MESSAGES.\nMake sure the 3 required endpoints have been created as shown below.\n"
},
{
	"uri": "//localhost:50000/2-create_ec2_instance_for_load_balancing/2.1-launch_your_first_ec2_instance/2.1.3-createprivatesubnet/",
	"title": "Create Private Subnet",
	"tags": [],
	"description": "",
	"content": "Create Private Subnet Click Subnets. Click Create subnet. At the Create subnet page. In the VPC ID section, click Lab VPC. In the Subnet name field, enter Lab Private Subnet. In the Availability Zone section, select the first Availability zone. In the field IPv4 CIRD block enter 10.10.2.0/24. Scroll to the bottom of the page, click Create subnet. The next step is to create the necessary security groups for the lab.\n"
},
{
	"uri": "//localhost:50000/4-test_clean_up/4.3-creategwes3/",
	"title": "Create S3 Gateway endpoint",
	"tags": [],
	"description": "",
	"content": " Go to VPC service management console Click Endpoints. Click Create endpoint. At the Create endpoint page. In the Name tag field, enter S3GW. In the Service Category section, click AWS services. In the search box enter S3, then select com.amazonaws.[region].s3 In the Services section, select com.amazonaws.[region].s3 with the Type of Gateway. In the VPC section, select Lab VPC. In the Route tables section, select both route tables. Scroll down, click Create endpoint. The next step is to configure Session Manager to store session logs to the S3 bucket we created.\n"
},
{
	"uri": "//localhost:50000/2-create_ec2_instance_for_load_balancing/2.1-launch_your_first_ec2_instance/2.1.4-createsecgroup/",
	"title": "Create security groups",
	"tags": [],
	"description": "",
	"content": "Create security groups In this step, we will proceed to create the security groups used for our instances. As you can see, these security groups will not need to open traditional ports to ssh like port 22 or remote desktop through port 3389.\nCreate security group for Linux instance located in public subnet Go to VPC service management console Click Security Group. Click Create security group. In the Security group name field, enter SG Public Linux Instance. In the Description section, enter SG Public Linux Instance. In the VPC section, click the X to reselect the Lab VPC you created for this lab. Keep Outbound rule, drag the mouse to the bottom. Click Create security group. As you can see, the security group we created to use for Linux public instances will not need to open traditional ports to ssh like port 22.\nCreate a security group for a Windows instance located in a private subnet After successfully creating a security group for the Linux instance located in the public subnet, click the Security Groups link to return to the Security groups list. Click Create security group.\nIn the Security group name field, enter SG Private Windows Instance.\nIn the Description section, enter SG Private Windows Instance. In the VPC section, click the X to reselect the Lab VPC you created for this lab. Scroll down. Add Outbound rule to allow TCP 443 connection to 10.10.0.0/16 ( CIDR of Lab VPC we created) Click Create security group. For the Instance in the private subnet, we will connect to the Session Manager endpoint over a TLS encrypted connection, so we need to allow outbound connection from our instance to VPC CIDR through port 443.\nCreate security group for VPC Endpoint In this step, we will create security group for VPC Endpoint of Session Manager. After successfully creating the security group for the Windows instance in the private subnet, click the Security Groups link to return to the Security groups list. Click Create security group. In the Security group name field, enter SG VPC Endpoint. In the Description section, enter SG VPC Endpoint. In the VPC section, click the X to reselect the Lab VPC you created for this lab. Scroll down. Delete Outbound rule. Add Inbound rule allowing TCP 443 to come from 10.10.0.0/16 ( CIDR of Lab VPC we created ). Click Create security group. So we are done creating the necessary security groups for EC2 instances and VPC Endpoints.\n"
},
{
	"uri": "//localhost:50000/4-test_clean_up/",
	"title": "Manage session logs",
	"tags": [],
	"description": "",
	"content": "With Session Manager, we can view the history of connections to instances through Session history. However, we have not seen the details of the commands used in a session.\nIn this section, we will proceed to create an S3 bucket and configure the session logs feature to see the details of the commands used in the session.\nContent: Update IAM Role Create S3 Bucket Create S3 Gateway endpoint Configure Session logs "
},
{
	"uri": "//localhost:50000/4-test_clean_up/4.4-configsessionlogs/",
	"title": "Monitor session logs",
	"tags": [],
	"description": "",
	"content": "Monitor session logs Access System Manager - Session Manager service management console Click the Preferences tab. Click Edit. Scroll down, at S3 logging, click Enable. Uncheck Allow only encrypted S3 buckets. Click Choose a bucket name from the list. Select the S3 bucket you created. Scroll down, click Save to save the configuration.\nAccess System Manager - Session Manager service management console\nClick Start session. Click Private Windows Instance. Click Start session. Type the command ipconfig. Type the command hostname. Click Terminate to exit the session, click Terminate again to confirm. Check Session logs in S3 Go to S3 service management console Click on the name of the S3 bucket we created for the lab. Click on the object name sessions log On the objects detail page, click Open. Object logs will be opened in a new tab in the browser. You can view the stored commands in session logs. "
},
{
	"uri": "//localhost:50000/2-create_ec2_instance_for_load_balancing/2.1-launch_your_first_ec2_instance/2.1.5-createec2linux/",
	"title": "Create Public instance",
	"tags": [],
	"description": "",
	"content": " Go to EC2 service management console Click Instances. Click Launch instances. On the Step 1: Choose an Amazon Machine Image (AMI) page. Click Select to select AMI Amazon Linux 2 AMI. On the Step 2: Choose an Instance Type page. Click on Instance type t2.micro. Click Next: Configure Instance Details. At Step 3: Configure Instance Details page In the Network section, select Lab VPC. In the Subnet section, select Lab Public Subnet. In the Auto-assign Public IP section, select Use subnet setting (Enable) Click Next: Add Storage. Click Next: Add Tags to move to the next step. Click Next: Configure Security Group to move to the next step. On page Step 6: Configure Security Group. Select Select an existing security group. Select security group SG Public Linux Instance. Click Review and Launch. The warning dialog box appears because we do not configure the firewall to allow connections to port 22, Click Continue to continue.\nAt page Step 7: Review Instance Launch.\nClick Launch. In the Select an existing key pair or create a new key pair dialog box. Click to select Create a new key pair. In the Key pair name field, enter LabKeypair. Click Download Key Pair and save it to your computer. Click Launch Instances to create EC2 server. Click View Instances to return to the list of EC2 instances.\nClick the edit icon under the Name column.\nIn the Edit Name dialog box, enter Public Linux Instance. Click Save. Next, we will do the same to create an EC2 Instance Windows running in the Private subnet.\n"
},
{
	"uri": "//localhost:50000/2-create_ec2_instance_for_load_balancing/2.1-launch_your_first_ec2_instance/2.1.6-createec2windows/",
	"title": "Create Private Instance",
	"tags": [],
	"description": "",
	"content": " Go to EC2 service management console Click Instances. Click Launch instances. On the Step 1: Choose an Amazon Machine Image (AMI) page. Drag the mouse down. Click Select to select AMI Microsoft Windows Server 2019 Base. On the Step 2: Choose an Instance Type page. Click on Instance type t2.micro. Click Next: Configure Instance Details. At Step 3: Configure Instance Details page In the Network section, select Lab VPC. In the Subnet section, select Lab Private Subnet. At Auto-assign Public IP select Use subnet setting (Disable) Click Next: Add Storage. Click Next: Add Tags to move to the next step. Click Next: Configure Security Group to move to the next step. On page Step 6: Configure Security Group. Select Select an existing security group. Select security group SG Private Windows Instance. Click Review and Launch. The warning dialog box appears because we do not configure the firewall to allow connections to port 22, Click Continue to continue.\nAt page Step 7: Review Instance Launch.\nClick Launch. In the Select an existing key pair or create a new key pair dialog box. Click Choose an existing key pair. In the Key pair name section, select LabKeypair. Click I acknowledge that I have access to the corresponding private key file, and that without this file, I won\u0026rsquo;t be able to log into my instance.. Click Launch Instances to create EC2 server. Click View Instances to return to the list of EC2 instances.\nClick the edit icon under the Name column.\nIn the Edit Name dialog box, enter Private Windows Instance. Click Save. Next, we will proceed to create IAM Roles to serve the Session Manager.\n"
},
{
	"uri": "//localhost:50000/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:50000/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]